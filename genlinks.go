package main

import (
	"bytes"
	"flag"
	"fmt"
	"html/template"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
)

// generate docs index

const indexHTML = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="description" content="hello-html">
  <meta name="subject" content="generated by genlinks.go">
  <title>step by step</title>
</head>
<body>
{{range .Items}}
  <div><a href="{{ . }}">{{ . }}</a></div>{{end}}

</body>
</html>
`

func writeIndex(w io.Writer, Items []string) error {
	t, err := template.New("index").Parse(indexHTML)
	if err != nil {
		return err
	}
	data := struct {
		Items []string
	}{
		Items: Items,
	}
	if err := t.Execute(w, data); err != nil {
		return err
	}
	return nil
}

func crawlDocs(root string) ([]string, error) {
	var result []string
	err := filepath.Walk(root, func(name string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.Mode().IsRegular() && path.Ext(name) == ".html" {
			p, err := filepath.Rel(root, name)
			if err != nil {
				return err
			}
			if p == "index.html" {
				return nil
			}
			result = append(result, p)
		}
		return nil
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

func main() {
	var root string
	var out string
	flag.StringVar(&root, "root", "docs", "specify root direcotry")
	flag.StringVar(&out, "out", filepath.Join("docs", "index.html"), "specify out file")
	flag.Parse()
	if flag.NArg() != 0 {
		log.Fatalf("invalid argument: %+v", flag.Args())
	}

	var rw interface {
		io.Writer
		io.Reader
	}
	if out != "" {
		f, err := os.Create(out)
		if err != nil {
			log.Fatal(err)
		}
		log.Println("write to :", out)
		rw = f
	} else {
		b := make([]byte, 0, len(indexHTML)*2)
		buf := bytes.NewBuffer(b)
		rw = buf
		log.Println("write to temporary buffer")
	}

	items, err := crawlDocs(root)
	if err != nil {
		log.Fatal(err)
	}

	if err := writeIndex(rw, items); err != nil {
		log.Fatal(err)
	}

	switch t := rw.(type) {
	case *bytes.Buffer:
		fmt.Printf("%s\n", rw)
	case *os.File:
		fmt.Printf("found links:\n\t%s\n", strings.Join(items, "\n\t"))
		fmt.Printf("writed :[%s]\n", t.Name())
	}
}
